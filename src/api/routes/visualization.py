'''
Visualization API routes for the IoT Network Digital Twin project.
This module defines the API endpoints for visualizing data related to the IoT network and digital twin
concepts.
'''

from fastapi import APIRouter, HTTPException, Query
from src.api.db.supabase_config import create_supabase_client
from datetime import datetime

# Define the API router
router = APIRouter()

# Load real and simulated data from Supabase
supabase = create_supabase_client()

# Define real data visualization endpoint
@router.get("/real")
async def visualize_real_data(
  start_date: datetime = Query(..., description="Start date for data retrieval in ISO format"),
  end_date: datetime = Query(..., description="End date for data retrieval in ISO format"),
  category: str = Query(..., description="Category of data to filter by (temperature, humidity(%), latency(ms), rssi(dBm))"),
):
  '''
  Endpoint to visualize real data from the IoT network.
  This endpoint will return a visualization of the real data collected from the IoT devices.
  '''
  try:
    offset = 0
    batch_size = 1000
    all_data = []
    safe_category = f'"{category}"' if '(' in category or ')' in category else category
    
    while True:
    # Fetch data in batches to avoid memory issues with large datasets
      response = supabase.table("esp32_real_data").select(safe_category) \
        .range(offset, offset + batch_size - 1) \
        .gte("timestamp", start_date) \
        .lte("timestamp", end_date) \
        .execute()
      
      # Check if the response contains data
      batch = response.data
      if not batch:
        break
      
      # Preprocess the data if necessary
      all_data.extend(batch)
      offset += batch_size
      
    values = [item[category] for item in all_data]
    
    # Return the data in a structured format
    return {
      "status": 200,
      "message": f"{category} data retrieved successfully.",
      "data": [
        {
          category: values,
        }
      ],
      "count": len(values)
    }
  except Exception as e:
    raise HTTPException(status_code=500, detail=str(e))

# Define simulated data visualization endpoint
@router.get("/simulated")
async def visualize_simulated_data(
  start_date: datetime = Query(..., description="Start date for data retrieval in ISO format"),
  end_date: datetime = Query(..., description="End date for data retrieval in ISO format"),
  category: str = Query(..., description="Category of data to filter by (temperature, humidity(%), latency(ms), rssi(dBm))")
):
  '''
  Endpoint to visualize simulated data from the IoT network.
  This endpoint will return a visualization of the simulated data generated by the digital twin model.
  '''
  try:
    # Define the batch size and offset for pagination
    all_data = []
    batch_size = 1000
    offset = 0
    safe_category = f'"{category}"' if '(' in category or ')' in category else category
    
    while True:
      # Fetch data in batches to avoid memory issues with large datasets
      response = supabase.table("esp32_simulated_data").select(safe_category) \
        .range(offset, offset + batch_size - 1) \
        .gte("timestamp", start_date) \
        .lte("timestamp", end_date) \
        .execute()
      batch = response.data
      
      # If no more data is available, break the loop
      if not batch:
        break
      
      # Preprocess the data if necessary
      all_data.extend(batch)
      offset += batch_size
    
    # Extract the values for the specified category
    values = [item[category] for item in all_data]
    # Return the data with a success status
    return {
      "status": 200,
      "message": f"{category} data retrieved successfully.",
      "data": [
        {
          category: values,
        }
      ],
      "count": len(values)
    }
  except Exception as e:
    raise HTTPException(status_code=500, detail=str(e))